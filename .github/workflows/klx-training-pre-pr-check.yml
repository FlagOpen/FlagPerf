# 配置和使用文档请参考: https://github.com/FlagOpen/FlagPerf/pull/318
name: klx-training-pre-pr-check

on:
  workflow_dispatch:
    inputs:
      case1x1:
        description: '1x1 case name that filled into test_conf.py (empty means not to execute)'
        default: 'model:framework:hardwareID:1:1:1'
      case1x8:
        description: '1x8 case name that filled into test_conf.py (empty means not to execute)'
        default: 'model:framework:hardwareID:1:8:1'
      dataset_path:
        description: 'dataset path filled into test_conf.py'
        default: 'dataset path'
        required: true
jobs:
  run-klx-training-test:
    runs-on: [ self-hosted, klx, r480 ]
    steps:
      # 1. Checkout
      - name: 1. Checkout code
        uses: actions/checkout@master
        with:
          fetch-depth: 1
      
      # 2. Create tmp directory
      - name: 2.1 Retrieve the current timestamp
        id: work-timestamp
        run: echo "WORK_TIMESTAMP=$(date +"%Y-%m%d-%H%M%S")"  >> "$GITHUB_OUTPUT"

      - name: 2.2 Set work directory variable
        id: work-directory
        env:
          WORK_TIMESTAMP: ${{ steps.work-timestamp.outputs.WORK_TIMESTAMP }}
        run: echo "WORK_DIRECTORY=$(realpath ${PWD}/..)/FlagPerf-$WORK_TIMESTAMP"  >> "$GITHUB_OUTPUT"

      - name: 2.3 Create work directory and copy the whole directory
        env:
          WORK_DIRECTORY: ${{ steps.work-directory.outputs.WORK_DIRECTORY }}
        run: |
          mkdir ${WORK_DIRECTORY} &&
          cp -r * ${WORK_DIRECTORY}

      # 3. Setup basic information in test_conf.py
      - name: 3. Setup test_conf.py
        env:
          WORK_DIRECTORY: ${{ steps.work-directory.outputs.WORK_DIRECTORY }}
        run: |
          export TEST_CONF_FILEPATH=${WORK_DIRECTORY}/training/run_benchmarks/config/test_conf.py
          echo "VENDOR = 'kunlunxin'" >> ${TEST_CONF_FILEPATH} &&
          echo "ACCE_CONTAINER_OPT = '--device=/dev/xpu0 --device=/dev/xpu1 --device=/dev/xpu2 --device=/dev/xpu3 --device=/dev/xpu4 --device=/dev/xpu5 --device=/dev/xpu6 --device=/dev/xpu7 --device=/dev/xpuctrl'" >> ${TEST_CONF_FILEPATH} &&
          echo "ACCE_VISIBLE_DEVICE_ENV_NAME = 'XPU_VISIBLE_DEVICES'" >> ${TEST_CONF_FILEPATH} &&
          echo "PIP_SOURCE = 'https://pypi.tuna.tsinghua.edu.cn/simple'" &&
          echo "FLAGPERF_PATH = '${WORK_DIRECTORY}/training'" >> ${TEST_CONF_FILEPATH} &&
          echo "FLAGPERF_LOG_PATH = '${WORK_DIRECTORY}/training/result/'" >> ${TEST_CONF_FILEPATH} &&
          cat ${TEST_CONF_FILEPATH}

      # 4. Setup cases in test_conf.py
      - name: 4.1 Setup 1x1 case and 1x8 case in test_conf.py
        if: ${{ inputs.case1x1 != '' && inputs.case1x8 != '' }}
        env:
          WORK_DIRECTORY: ${{ steps.work-directory.outputs.WORK_DIRECTORY }}
        run: |
          echo "CASES = { '${{ inputs.case1x1 }}' : '${{ inputs.dataset_path }}', '${{ inputs.case1x8 }}' : '${{ inputs.dataset_path }}' }" >> ${WORK_DIRECTORY}/training/run_benchmarks/config/test_conf.py &&
          cat ${WORK_DIRECTORY}/training/run_benchmarks/config/test_conf.py
      - name: 4.2 Setup 1x1 case in test_conf.py
        if: ${{ inputs.case1x1 != '' && inputs.case1x8 == '' }}
        env:
          WORK_DIRECTORY: ${{ steps.work-directory.outputs.WORK_DIRECTORY }}
        run: |
          echo "CASES = { '${{ inputs.case1x1 }}' : '${{ inputs.dataset_path }}' }" >> ${WORK_DIRECTORY}/training/run_benchmarks/config/test_conf.py &&
          cat ${WORK_DIRECTORY}/training/run_benchmarks/config/test_conf.py
      - name: 4.3 Setup 1x8 case in test_conf.py
        if: ${{ inputs.case1x1 == '' && inputs.case1x8 != '' }}
        env:
          WORK_DIRECTORY: ${{ steps.work-directory.outputs.WORK_DIRECTORY }}
        run: |
          echo "CASES = { '${{ inputs.case1x1 }}' : '${{ inputs.dataset_path }}' }" >> ${WORK_DIRECTORY}/training/run_benchmarks/config/test_conf.py &&
          cat ${WORK_DIRECTORY}/training/run_benchmarks/config/test_conf.py
      - name: 4.4 Setup empty cases in test_conf.py
        if: ${{ inputs.case1x1 == '' && inputs.case1x8 == '' }}
        env:
          WORK_DIRECTORY: ${{ steps.work-directory.outputs.WORK_DIRECTORY }}
        run: |
          echo "At least one of case1x1 and case1x8 is not empty!" &&
          ls non_existent_file.txt

      # 5. Setup cluster_conf.py
      - name: 5. Setup cluster_conf.py
        env:
          WORK_DIRECTORY: ${{ steps.work-directory.outputs.WORK_DIRECTORY }}
        run: |
          echo "HOSTS = ['127.0.0.1']" >> ${WORK_DIRECTORY}/training/run_benchmarks/config/cluster_conf.py &&
          cat ${WORK_DIRECTORY}/training/run_benchmarks/config/cluster_conf.py

      # 6. Run test
      - name: 6. Run test
        env:
          WORK_DIRECTORY: ${{ steps.work-directory.outputs.WORK_DIRECTORY }}
        run: |
          pushd ${WORK_DIRECTORY}/training &&
          python3 run_benchmarks/run.py 2>&1 | tee tmp_run.log &&
          popd

      # 7. Verify test result
      # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-output-parameter
      - name: 7.1 Get run result name
        id: run-result-name
        env:
          WORK_DIRECTORY: ${{ steps.work-directory.outputs.WORK_DIRECTORY }}
        run: echo "RUN_RESULT_NAME=$(cat ${WORK_DIRECTORY}/training/tmp_run.log | grep 'Initialize logger with log path:' | egrep -o 'run[0-9]+')"  >> "$GITHUB_OUTPUT"

      - name: 7.2 Verify 1x1 case result
        if: ${{ inputs.case1x1 != '' }}
        env:
          WORK_DIRECTORY: ${{ steps.work-directory.outputs.WORK_DIRECTORY }}
          RUN_RESULT_NAME: ${{ steps.run-result-name.outputs.RUN_RESULT_NAME }}
        run: |
          cat ${WORK_DIRECTORY}/training/result/${RUN_RESULT_NAME}/${{ inputs.case1x1 }}/round1/127.0.0.1_noderank0/rank0.out.log &&
          grep '"event": "FINISHED"' "${WORK_DIRECTORY}/training/result/${RUN_RESULT_NAME}/${{ inputs.case1x1 }}/round1/127.0.0.1_noderank0/rank0.out.log"

      - name: 7.3 Verify 1x8 case result
        if: ${{ inputs.case1x8 != '' }}
        env:
          WORK_DIRECTORY: ${{ steps.work-directory.outputs.WORK_DIRECTORY }}
          RUN_RESULT_NAME: ${{ steps.run-result-name.outputs.RUN_RESULT_NAME }}
        run: |
          cat ${WORK_DIRECTORY}/training/result/${RUN_RESULT_NAME}/${{ inputs.case1x8 }}/round1/127.0.0.1_noderank0/rank0.out.log &&
          grep '"event": "FINISHED"' "${WORK_DIRECTORY}/training/result/${RUN_RESULT_NAME}/${{ inputs.case1x8 }}/round1/127.0.0.1_noderank0/rank0.out.log"
